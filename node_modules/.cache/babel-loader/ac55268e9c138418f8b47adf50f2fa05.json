{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Events.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoAlbers, geoPath } from \"d3-geo\";\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projection = geoAlbers().scale(360).translate([960 / 2, 600 / 2]);\n\nfunction Events(data) {\n  _s();\n\n  const [eventsData, setEventsData] = useState([]); // console.log(data)\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./mass_shooting_events_stanford_msa_release.geojson');\n      const eventsDataCombine = await res.json();\n      const eventsData = eventsDataCombine.features;\n      setEventsData(eventsData);\n    })();\n  }, []);\n  console.log(eventsData); //   console.log(eventsData.features)\n\n  const ref = useD3(svg => {\n    svg.selectAll(\".points\").data(eventsData).enter().append(\"circle\").attr(\"r\", function (d) {\n      return 1;\n    }).style(\"fill\", \"#9865ff\").attr(\"transform\", function (d) {\n      console.log(d);\n\n      if (d.properties.State == \"Alaska\") {\n        return;\n      } else if (d.properties.State == \"Hawaii\") {\n        return;\n      }\n\n      return \"translate(\" + projection(d.geometry.coordinates) + \")\";\n    });\n  }, [eventsData.length]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: \"0 0 960 600\",\n    className: \"Events\",\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 6\n  }, this);\n}\n\n_s(Events, \"C/sGpUcbJR5pUMoFFCndJ88m10E=\", false, function () {\n  return [useD3];\n});\n\n_c = Events;\nexport default Events;\n\nvar _c;\n\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Events.js"],"names":["React","useState","useEffect","geoAlbers","geoPath","useD3","d3","feature","projection","scale","translate","Events","data","eventsData","setEventsData","res","fetch","eventsDataCombine","json","features","console","log","ref","svg","selectAll","enter","append","attr","d","style","properties","State","geometry","coordinates","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,QAAnC;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,MAAMC,UAAU,GAAGL,SAAS,GACzBM,KADgB,CACV,GADU,EAEhBC,SAFgB,CAEN,CAAE,MAAM,CAAR,EAAW,MAAM,CAAjB,CAFM,CAAnB;;AAKA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAAA;;AACpB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C,CADoB,CAEpB;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,YAAMa,GAAG,GAAG,MAAMC,KAAK,CAAC,qDAAD,CAAvB;AACA,YAAMC,iBAAiB,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAhC;AACA,YAAML,UAAU,GAAGI,iBAAiB,CAACE,QAArC;AACAL,MAAAA,aAAa,CAACD,UAAD,CAAb;AACD,KALD;AAMD,GAPQ,EAON,EAPM,CAAT;AASAO,EAAAA,OAAO,CAACC,GAAR,CAAYR,UAAZ,EAboB,CActB;;AAEE,QAAMS,GAAG,GAAGjB,KAAK,CACdkB,GAAD,IAAS;AACPA,IAAAA,GAAG,CACAC,SADH,CACa,SADb,EAEGZ,IAFH,CAEQC,UAFR,EAEoBY,KAFpB,GAGGC,MAHH,CAGU,QAHV,EAIGC,IAJH,CAIQ,GAJR,EAKM,UAAUC,CAAV,EAAa;AACT,aAAO,CAAP;AACH,KAPP,EAQGC,KARH,CASM,MATN,EASa,SATb,EAWGF,IAXH,CAWQ,WAXR,EAYM,UAASC,CAAT,EAAY;AACRR,MAAAA,OAAO,CAACC,GAAR,CAAYO,CAAZ;;AACA,UAAIA,CAAC,CAACE,UAAF,CAAaC,KAAb,IAAsB,QAA1B,EAAmC;AAC/B;AACH,OAFD,MAEM,IAAGH,CAAC,CAACE,UAAF,CAAaC,KAAb,IAAsB,QAAzB,EAAkC;AACpC;AACH;;AACD,aAAO,eAAevB,UAAU,CAACoB,CAAC,CAACI,QAAF,CAAWC,WAAZ,CAAzB,GAAoD,GAA3D;AACH,KApBP;AAqBC,GAvBY,EAuBX,CAACpB,UAAU,CAACqB,MAAZ,CAvBW,CAAjB;AA0BA,sBACG;AAAK,IAAA,OAAO,EAAC,aAAb;AAA2B,IAAA,SAAS,EAAC,QAArC;AAA8C,IAAA,GAAG,EAAEZ;AAAnD;AAAA;AAAA;AAAA;AAAA,UADH;AAGD;;GA7CQX,M;UAgBKN,K;;;KAhBLM,M;AA+CT,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { geoAlbers, geoPath } from \"d3-geo\"\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\"\nimport { feature } from \"topojson-client\"\n\nconst projection = geoAlbers()\n  .scale(360)\n  .translate([ 960 / 2, 600 / 2 ])\n\n\nfunction Events(data) {\n  const [eventsData, setEventsData] = useState([]);\n  // console.log(data)\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./mass_shooting_events_stanford_msa_release.geojson')\n      const eventsDataCombine = await res.json();\n      const eventsData = eventsDataCombine.features\n      setEventsData(eventsData);\n    })();\n  }, []);\n\n  console.log(eventsData)\n//   console.log(eventsData.features)\n\n  const ref = useD3(\n    (svg) => { \n      svg\n        .selectAll(\".points\")\n        .data(eventsData).enter()\n        .append(\"circle\")\n        .attr(\"r\", \n            function (d) { \n                return 1\n            })\n        .style(\n            \"fill\",\"#9865ff\"\n        )\n        .attr(\"transform\", \n            function(d) { \n                console.log(d)\n                if (d.properties.State == \"Alaska\"){\n                    return\n                }else if(d.properties.State == \"Hawaii\"){\n                    return\n                }\n                return \"translate(\" + projection(d.geometry.coordinates) + \")\" \n            })\n      },[eventsData.length]\n  )\n  \n  return (\n     <svg viewBox=\"0 0 960 600\" className=\"Events\" ref={ref}></svg>\n  )\n}\n\nexport default Events"]},"metadata":{},"sourceType":"module"}