{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useLayoutEffect } from \"react\"; // import { geoEqualEarth, geoPath } from \"d3-geo\"\n\nimport d3Tip from \"d3-tip\";\nimport { geoAlbers, geoPath, geoAlbersUsa } from \"d3-geo\";\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\"; // const projection = geoEqualEarth()\n//   .scale(160)\n//   .translate([ 800 / 2, 450 / 2 ])\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Map(props) {\n  _s();\n\n  const ref = React.useRef(null);\n  const [statesData, setStatesData] = useState([]);\n  const [scaleData, setScaleData] = useState(props.scaleSend);\n  const [eventsData, setEventsData] = useState([]); // let projection = geoAlbersUsa()\n  // .scale(scaleData)\n  // .translate([ 960 / 2, 600 / 2 ])\n  // console.log(`OUT${scaleData}`)\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./gz_2010_us_040_00_500k.json');\n      const statesDataCombine = await res.json();\n      const statesData = statesDataCombine.features;\n      setStatesData(statesData);\n      setScaleData(props.scaleSend);\n      const res1 = await fetch('./cases.geojson');\n      const eventsDataCombine = await res1.json();\n      const eventsData = eventsDataCombine.features;\n      setEventsData(eventsData);\n      const projection = geoAlbersUsa().scale(scaleData).translate([960 / 2, 600 / 2]);\n      const chartEl = d3.select(ref.current);\n      chartEl.selectAll(\"*\").remove();\n      const chart = chartEl.append(\"g\");\n      const path = d3.geoPath().projection(projection); // const caseTip = d3.select(\".case\").append(\"div\") \n      //   .attr(\"class\", \"caseTip\")               \n      //   .style(\"opacity\", 0);\n\n      console.log(scaleData);\n      const myColor = d3.scaleLinear().domain([1, 10]).range([\"white\", \"#666666\"]);\n      const caseTip = d3Tip().attr('class', 'd3-tip').offset([-10, 0]); // chart.call(caseTip);\n\n      chart.selectAll(\"path\").data(statesData).enter().append(\"path\").attr(\"class\", \"state\").attr(\"id\", function (d) {\n        return d.properties.NAME;\n      }).attr(\"d\", path) // .style(\"fill\", \"steelblue\");\n      // .style(\n      //     \"opacity\", \n      //     function(d){\n      //       for (let i = 0; i < props.data1.length ; i++){\n      //         if (props.data1[i].name == d.properties.NAME) {\n      //           // console.log(data1.data1[i].num)\n      //           return props.data1[i].num + 0.05\n      //         }\n      //       } \n      //     })\n      .style(\"fill\", function (d) {\n        for (let i = 0; i < props.data2.length; i++) {\n          if (props.data2[i].name == d.properties.NAME) {\n            // console.log(myColor(props.data2[i]))\n            console.log(`Here${myColor(props.data2[i].num * 10)}`);\n            console.log(`Here${i}`);\n            console.log(`Here${props.data2[i].num}`);\n            return myColor(props.data2[i].num * 10);\n          }\n        }\n      });\n      chart.selectAll(\".points\").data(eventsData).enter().append(\"circle\").attr(\"class\", \"case\").attr(\"r\", function (d) {\n        // console.log(d)\n        return 4.0; // }\n      }).attr(\"transform\", function (d) {\n        // console.log(d)\n        return \"translate(\" + projection(d.geometry.coordinates) + \")\";\n      }).on('mouseover', function (d, eventsData) {\n        console.log(d);\n        return caseTip.html(\"<strong>State:</strong> <span style='color:red'>\" + eventsData.properties.state + \"</span>\" + \"<strong>City:</strong> <span style='color:red'>\" + eventsData.properties.city + \"</span>\" + \"<strong>Killed:</strong> <span style='color:red'>\" + eventsData.properties.killed + \"</span>\" + \"<strong>Injured:</strong> <span style='color:red'>\" + eventsData.properties.injured + \"</span>\" + \"<strong>Killed:</strong> <span style='color:red'>\" + eventsData.properties.year + eventsData.properties.month + eventsData.properties.day + \"</span>\" + \"<strong>Gun:</strong> <span style='color:red'>\" + eventsData.properties.guntype + \"</span>\").show;\n      }).on('mouseout', caseTip.hide);\n    })();\n  }, [statesData.length]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: \"0 0 960 600\",\n    className: \"usMap Map\",\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"mHDCDNg4aNsMKZpgB1SRBpTJyKg=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Map.js"],"names":["React","useState","useEffect","useLayoutEffect","d3Tip","geoAlbers","geoPath","geoAlbersUsa","useD3","d3","feature","Map","props","ref","useRef","statesData","setStatesData","scaleData","setScaleData","scaleSend","eventsData","setEventsData","res","fetch","statesDataCombine","json","features","res1","eventsDataCombine","projection","scale","translate","chartEl","select","current","selectAll","remove","chart","append","path","console","log","myColor","scaleLinear","domain","range","caseTip","attr","offset","data","enter","d","properties","NAME","style","i","data2","length","name","num","geometry","coordinates","on","html","state","city","killed","injured","year","month","day","guntype","show","hide"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from \"react\"\n// import { geoEqualEarth, geoPath } from \"d3-geo\"\nimport d3Tip from \"d3-tip\"\nimport { geoAlbers, geoPath, geoAlbersUsa } from \"d3-geo\"\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\"\nimport { feature } from \"topojson-client\"\n\n// const projection = geoEqualEarth()\n//   .scale(160)\n//   .translate([ 800 / 2, 450 / 2 ])\n\nfunction Map(props) {\n\n  const ref = React.useRef(null);\n  const [statesData, setStatesData] = useState([]);\n  const [scaleData, setScaleData] = useState(props.scaleSend);\n  const [eventsData, setEventsData] = useState([]);\n\n\n  // let projection = geoAlbersUsa()\n  // .scale(scaleData)\n  // .translate([ 960 / 2, 600 / 2 ])\n\n  // console.log(`OUT${scaleData}`)\n  \n\n  useEffect(() => {\n\n    (async () => {\n      const res = await fetch('./gz_2010_us_040_00_500k.json')\n      const statesDataCombine = await res.json();\n      const statesData = statesDataCombine.features\n      setStatesData(statesData);\n      setScaleData(props.scaleSend);\n\n      const res1 = await fetch('./cases.geojson')\n      const eventsDataCombine = await res1.json();\n      const eventsData = eventsDataCombine.features;\n      setEventsData(eventsData);\n\n      const projection = geoAlbersUsa()\n        .scale(scaleData)\n        .translate([960 / 2, 600 / 2])\n\n      const chartEl = d3.select(ref.current);\n      chartEl.selectAll(\"*\").remove();\n\n      const chart = chartEl.append(\"g\")\n\n      const path = d3.geoPath()\n        .projection(projection);\n\n      // const caseTip = d3.select(\".case\").append(\"div\") \n      //   .attr(\"class\", \"caseTip\")               \n      //   .style(\"opacity\", 0);\n\n      console.log(scaleData);\n      const myColor = d3.scaleLinear().domain([1, 10]).range([\"white\",\"#666666\"])\n\n      const caseTip = d3Tip()\n        .attr('class', 'd3-tip')\n        .offset([-10, 0])\n\n\n      // chart.call(caseTip);\n\n      chart.selectAll(\"path\")\n        .data(statesData)\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", \"state\")\n        .attr(\"id\", function (d) {\n          return d.properties.NAME\n        })\n        .attr(\"d\", path)\n        // .style(\"fill\", \"steelblue\");\n        // .style(\n        //     \"opacity\", \n        //     function(d){\n        //       for (let i = 0; i < props.data1.length ; i++){\n        //         if (props.data1[i].name == d.properties.NAME) {\n        //           // console.log(data1.data1[i].num)\n        //           return props.data1[i].num + 0.05\n        //         }\n        //       } \n        //     })\n        .style(\n          \"fill\",\n          function (d) {\n            for (let i = 0; i < props.data2.length; i++) {\n              if (props.data2[i].name == d.properties.NAME) {\n                // console.log(myColor(props.data2[i]))\n                console.log(`Here${myColor(props.data2[i].num * 10)}`)\n                console.log(`Here${i}`)\n                console.log(`Here${props.data2[i].num}`)\n                return myColor(props.data2[i].num * 10)\n              }\n            }\n          })\n          \n\n      chart\n        .selectAll(\".points\")\n        .data(eventsData).enter()\n        .append(\"circle\")\n        .attr(\"class\", \"case\")\n        .attr(\"r\",\n          function (d) {\n            // console.log(d)\n            return 4.0\n            // }\n          })\n        .attr(\"transform\",\n          function (d) {\n            // console.log(d)\n            return \"translate(\" + projection(d.geometry.coordinates) + \")\"\n          })\n        .on('mouseover', \n          function(d,eventsData) {\n            console.log(d)\n            return (\n            caseTip.html(\n              \"<strong>State:</strong> <span style='color:red'>\" + eventsData.properties.state + \"</span>\"\n              +\"<strong>City:</strong> <span style='color:red'>\" + eventsData.properties.city + \"</span>\"\n              +\"<strong>Killed:</strong> <span style='color:red'>\" + eventsData.properties.killed + \"</span>\"\n              +\"<strong>Injured:</strong> <span style='color:red'>\" + eventsData.properties.injured + \"</span>\"\n              +\"<strong>Killed:</strong> <span style='color:red'>\" + eventsData.properties.year + eventsData.properties.month+eventsData.properties.day + \"</span>\"\n              +\"<strong>Gun:</strong> <span style='color:red'>\" + eventsData.properties.guntype + \"</span>\"\n            )\n          ).show})\n        .on('mouseout', caseTip.hide)\n\n\n    })();\n\n  }, [statesData.length]\n  )\n\n\n  return (\n\n    <svg viewBox=\"0 0 960 600\" className=\"usMap Map\" ref={ref}></svg>\n  )\n}\n\n\n\nexport default Map"]},"metadata":{},"sourceType":"module"}