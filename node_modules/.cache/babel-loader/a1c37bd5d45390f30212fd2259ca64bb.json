{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import { geoEqualEarth, geoPath } from \"d3-geo\"\n\nimport { geoAlbers, geoPath, geoAlbersUsa } from \"d3-geo\";\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\"; // const projection = geoEqualEarth()\n//   .scale(160)\n//   .translate([ 800 / 2, 450 / 2 ])\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Map(props) {\n  _s();\n\n  const svgRef = React.useRef(null);\n  const [statesData, setStatesData] = useState([]);\n  const [scaleData, setScaleData] = useState(1200); // const [projection, setProjection] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./gz_2010_us_040_00_500k.json');\n      const statesDataCombine = await res.json();\n      const statesData = statesDataCombine.features;\n      setStatesData(statesData);\n      setScaleData(scaleData); // setProjection(projection)\n    })();\n  }, []);\n  const projection = geoAlbersUsa().scale(scaleData).translate([960 / 2, 600 / 2]); // React.useEffect(() => {\n\n  const ref = useD3(svg => {\n    const path = d3.geoPath().projection(projection);\n    const myColor = d3.scaleLinear().domain([0.0, 1.0]).range([\"white\", \"red\"]);\n    svg.selectAll(\"path\").data(statesData).enter().append(\"path\").attr(\"class\", \"state\").attr(\"id\", function (d) {\n      // console.log(d)\n      return d.properties.NAME;\n    }).attr(\"d\", path) // .style(\"fill\", \"steelblue\");\n    .style(\"opacity\", function (d) {\n      for (let i = 0; i < props.data1.length; i++) {\n        if (props.data1[i].name == d.properties.NAME) {\n          // console.log(data1.data1[i].num)\n          return props.data1[i].num + 0.05;\n        }\n      }\n    }).style(\"fill\", function (d) {\n      for (let i = 0; i < props.data2.length; i++) {\n        if (props.data2[i].name == d.properties.NAME) {\n          return myColor(d);\n        }\n      }\n    });\n  }, [statesData.length]);\n\n  const scaleChange = event => {\n    let scale = 1200 + (event.target.value - 50) * 15;\n    setScaleData(scale);\n    console.log(scaleData);\n  }; // var roadmapDataForD3 = { children: this.props.RoadmapData };\n\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: \"0 0 960 600\",\n    className: \"usMap Map\",\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 6\n  }, this);\n}\n\n_s(Map, \"AJjEhNvWYZcXkpH2Z2SzP920wwM=\", false, function () {\n  return [useD3];\n});\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Map.js"],"names":["React","useState","useEffect","geoAlbers","geoPath","geoAlbersUsa","useD3","d3","feature","Map","props","svgRef","useRef","statesData","setStatesData","scaleData","setScaleData","res","fetch","statesDataCombine","json","features","projection","scale","translate","ref","svg","path","myColor","scaleLinear","domain","range","selectAll","data","enter","append","attr","d","properties","NAME","style","i","data1","length","name","num","data2","scaleChange","event","target","value","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n// import { geoEqualEarth, geoPath } from \"d3-geo\"\nimport { geoAlbers, geoPath,geoAlbersUsa } from \"d3-geo\"\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\"\nimport { feature } from \"topojson-client\"\n\n// const projection = geoEqualEarth()\n//   .scale(160)\n//   .translate([ 800 / 2, 450 / 2 ])\n\nfunction Map(props) {\n\n  const svgRef = React.useRef(null);\n  const [statesData, setStatesData] = useState([]);\n  const [scaleData, setScaleData] = useState(1200);\n\n  // const [projection, setProjection] = useState([]);\n\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./gz_2010_us_040_00_500k.json')\n      const statesDataCombine = await res.json();\n      const statesData = statesDataCombine.features\n      setStatesData(statesData);\n\n      setScaleData(scaleData);\n\n      // setProjection(projection)\n\n    })();\n  }, []);\n\n  const projection = geoAlbersUsa()\n      .scale(scaleData)\n      .translate([ 960 / 2, 600 / 2 ])\n\n  // React.useEffect(() => {\n\n  const ref = useD3(\n    (svg) => {\n\n      const path = d3.geoPath()\n      .projection(projection);\n\n      const myColor = d3.scaleLinear().domain([0.0,1.0]).range([\"white\", \"red\"])\n\n      svg.selectAll(\"path\")\n        .data(statesData)\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", \"state\")\n        .attr(\"id\", function(d){\n          // console.log(d)\n        return d.properties.NAME\n        })\n        .attr(\"d\", path)\n        // .style(\"fill\", \"steelblue\");\n        .style(\n            \"opacity\", \n            function(d){\n              for (let i = 0; i < props.data1.length ; i++){\n                if (props.data1[i].name == d.properties.NAME) {\n                  // console.log(data1.data1[i].num)\n                  return props.data1[i].num + 0.05\n                }\n              } \n            })\n        .style(\n            \"fill\", \n            function(d){\n              for (let i = 0; i < props.data2.length ; i++){\n                if (props.data2[i].name == d.properties.NAME) {\n\n                  return myColor(d)\n                }\n              } \n            })\n      \n      },[statesData.length]\n  )\n\n  const scaleChange = event => {\n\n    let scale = 1200+(event.target.value-50)*15;\n    setScaleData(scale);\n  \n  console.log(scaleData)\n\n}\n\n// var roadmapDataForD3 = { children: this.props.RoadmapData };\n  \n  return (\n      \n     <svg viewBox=\"0 0 960 600\" className=\"usMap Map\" ref={ref}></svg>\n  )\n}\n\nexport default Map"]},"metadata":{},"sourceType":"module"}