{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Events.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoAlbers, geoPath, geoAlbersUsa } from \"d3-geo\";\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Events(data) {\n  _s();\n\n  const ref = React.useRef(null);\n  const [eventsData, setEventsData] = useState([]); //   const { list } = props;\n  //   const data = props\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./cases.geojson');\n      const eventsDataCombine = await res.json();\n      const eventsData = eventsDataCombine.features;\n      setEventsData(eventsData);\n      const projection = geoAlbersUsa().scale(data.scaleSend) // .scale(1200)\n      .translate([960 / 2, 600 / 2]);\n      const chartEl = d3.select(ref.current);\n      chartEl.selectAll(\"*\").remove();\n      const chart = chartEl.append(\"g\");\n      chart.selectAll(\".points\").data(eventsData).enter().append(\"circle\").attr(\"class\", \"event\").attr(\"r\", function (d) {\n        console.log(d);\n        return 4.0; // }\n      }).attr(\"transform\", function (d) {\n        console.log(d);\n        return \"translate(\" + projection(d.geometry.coordinates) + \")\";\n      });\n    })();\n  }, [eventsData.length]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: \"0 0 960 600\",\n    className: \"Events Map\",\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 6\n  }, this);\n}\n\n_s(Events, \"xJp9lagLd+ZaKX0xaHPfl7CxUV0=\");\n\n_c = Events;\nexport default Events;\n\nvar _c;\n\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Events.js"],"names":["React","useState","useEffect","geoAlbers","geoPath","geoAlbersUsa","useD3","d3","feature","Events","data","ref","useRef","eventsData","setEventsData","res","fetch","eventsDataCombine","json","features","projection","scale","scaleSend","translate","chartEl","select","current","selectAll","remove","chart","append","enter","attr","d","console","log","geometry","coordinates","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA4BC,YAA5B,QAAgD,QAAhD;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,OAAT,QAAwB,iBAAxB;;;AAEA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAAA;;AAEpB,QAAMC,GAAG,GAAGX,KAAK,CAACY,MAAN,CAAa,IAAb,CAAZ;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C,CAJoB,CAKtB;AACA;;AAEEC,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,YAAMa,GAAG,GAAG,MAAMC,KAAK,CAAC,iBAAD,CAAvB;AACA,YAAMC,iBAAiB,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAhC;AACA,YAAML,UAAU,GAAGI,iBAAiB,CAACE,QAArC;AACAL,MAAAA,aAAa,CAACD,UAAD,CAAb;AAEA,YAAMO,UAAU,GAAGf,YAAY,GAC9BgB,KADkB,CACZX,IAAI,CAACY,SADO,EAEnB;AAFmB,OAGlBC,SAHkB,CAGR,CAAE,MAAM,CAAR,EAAW,MAAM,CAAjB,CAHQ,CAAnB;AAKF,YAAMC,OAAO,GAAGjB,EAAE,CAACkB,MAAH,CAAUd,GAAG,CAACe,OAAd,CAAhB;AACAF,MAAAA,OAAO,CAACG,SAAR,CAAkB,GAAlB,EAAuBC,MAAvB;AAEA,YAAMC,KAAK,GAAGL,OAAO,CAACM,MAAR,CAAe,GAAf,CAAd;AAEAD,MAAAA,KAAK,CACAF,SADL,CACe,SADf,EAEKjB,IAFL,CAEUG,UAFV,EAEsBkB,KAFtB,GAGKD,MAHL,CAGY,QAHZ,EAIKE,IAJL,CAIU,OAJV,EAImB,OAJnB,EAKKA,IALL,CAKU,GALV,EAMQ,UAAUC,CAAV,EAAa;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACI,eAAO,GAAP,CAFK,CAGT;AACH,OAVT,EAWKD,IAXL,CAWU,WAXV,EAYQ,UAASC,CAAT,EAAY;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACF,eAAO,eAAeb,UAAU,CAACa,CAAC,CAACG,QAAF,CAAWC,WAAZ,CAAzB,GAAoD,GAA3D;AACH,OAfL;AAgBG,KAhCH;AAiCG,GAlCI,EAkCH,CAACxB,UAAU,CAACyB,MAAZ,CAlCG,CAAT;AAqCA,sBACG;AAAK,IAAA,OAAO,EAAC,aAAb;AAA2B,IAAA,SAAS,EAAC,YAArC;AAAkD,IAAA,GAAG,EAAE3B;AAAvD;AAAA;AAAA;AAAA;AAAA,UADH;AAGD;;GAhDQF,M;;KAAAA,M;AAkDT,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { geoAlbers, geoPath,geoAlbersUsa } from \"d3-geo\"\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\"\nimport { feature } from \"topojson-client\"\n\nfunction Events(data) {\n\n  const ref = React.useRef(null);\n\n  const [eventsData, setEventsData] = useState([]);\n//   const { list } = props;\n//   const data = props\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./cases.geojson')\n      const eventsDataCombine = await res.json();\n      const eventsData = eventsDataCombine.features;\n      setEventsData(eventsData);\n\n      const projection = geoAlbersUsa()\n      .scale(data.scaleSend)\n      // .scale(1200)\n      .translate([ 960 / 2, 600 / 2 ])\n      \n    const chartEl = d3.select(ref.current);\n    chartEl.selectAll(\"*\").remove();\n\n    const chart = chartEl.append(\"g\")\n\n    chart\n        .selectAll(\".points\")\n        .data(eventsData).enter()\n        .append(\"circle\")\n        .attr(\"class\", \"event\")\n        .attr(\"r\", \n            function (d) { \n                console.log(d)\n                    return 4.0\n                // }\n            })\n        .attr(\"transform\", \n            function(d) { \n              console.log(d)\n            return \"translate(\" + projection(d.geometry.coordinates) + \")\"\n        })\n      })();\n      },[eventsData.length]\n  )\n  \n  return (\n     <svg viewBox=\"0 0 960 600\" className=\"Events Map\" ref={ref}></svg>\n  )\n}\n\nexport default Events"]},"metadata":{},"sourceType":"module"}