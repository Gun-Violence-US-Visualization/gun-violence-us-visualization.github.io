{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Events.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoAlbers, geoPath, geoAlbersUsa } from \"d3-geo\";\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Events(data) {\n  _s();\n\n  const [eventsData, setEventsData] = useState([]); //   const { list } = props;\n  //   const data = props\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./cases.geojson');\n      const eventsDataCombine = await res.json();\n      const eventsData = eventsDataCombine.features;\n      setEventsData(eventsData);\n    })();\n  }, []);\n  const projection = geoAlbersUsa().scale(data.scaleSend) // .scale(1200)\n  .translate([960 / 2, 600 / 2]); // console.log(data.scaleSend)\n\n  const ref = useD3(svg => {\n    svg.selectAll(\".points\").data(eventsData).enter().append(\"circle\").attr(\"class\", \"event\").attr(\"r\", function (d) {\n      console.log(\"1111\");\n      console.log(d);\n      let r = (d.properties['Number of Civilian Fatalities'] + d.properties[\"Number of Civilian Injured\"]) / 2;\n\n      if (r <= 1.5) {\n        return 1.5;\n      } else if (r > 20.0) {\n        return 20.0;\n      } else {\n        return r;\n      }\n    }).attr(\"transform\", function (d) {\n      return \"translate(\" + projection(d.geometry.coordinates) + \")\";\n    });\n  }, [eventsData.length]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: \"0 0 960 600\",\n    className: \"Events Map\",\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 6\n  }, this);\n}\n\n_s(Events, \"C/sGpUcbJR5pUMoFFCndJ88m10E=\", false, function () {\n  return [useD3];\n});\n\n_c = Events;\nexport default Events;\n\nvar _c;\n\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Events.js"],"names":["React","useState","useEffect","geoAlbers","geoPath","geoAlbersUsa","useD3","d3","feature","Events","data","eventsData","setEventsData","res","fetch","eventsDataCombine","json","features","projection","scale","scaleSend","translate","ref","svg","selectAll","enter","append","attr","d","console","log","r","properties","geometry","coordinates","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA4BC,YAA5B,QAAgD,QAAhD;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,OAAT,QAAwB,iBAAxB;;;AAEA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAAA;;AAEpB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C,CAFoB,CAGtB;AACA;;AAEEC,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,YAAMW,GAAG,GAAG,MAAMC,KAAK,CAAC,iBAAD,CAAvB;AACA,YAAMC,iBAAiB,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAhC;AACA,YAAML,UAAU,GAAGI,iBAAiB,CAACE,QAArC;AACAL,MAAAA,aAAa,CAACD,UAAD,CAAb;AACD,KALD;AAMD,GAPQ,EAON,EAPM,CAAT;AASF,QAAMO,UAAU,GAAGb,YAAY,GAC1Bc,KADc,CACRT,IAAI,CAACU,SADG,EAEf;AAFe,GAGdC,SAHc,CAGJ,CAAE,MAAM,CAAR,EAAW,MAAM,CAAjB,CAHI,CAAnB,CAfsB,CAoBtB;;AAEE,QAAMC,GAAG,GAAGhB,KAAK,CACdiB,GAAD,IAAS;AACPA,IAAAA,GAAG,CACAC,SADH,CACa,SADb,EAEGd,IAFH,CAEQC,UAFR,EAEoBc,KAFpB,GAGGC,MAHH,CAGU,QAHV,EAIGC,IAJH,CAIQ,OAJR,EAIiB,OAJjB,EAKGA,IALH,CAKQ,GALR,EAMM,UAAUC,CAAV,EAAa;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAIG,CAAC,GAAG,CAACH,CAAC,CAACI,UAAF,CAAa,+BAAb,IAA8CJ,CAAC,CAACI,UAAF,CAAa,4BAAb,CAA/C,IAA2F,CAAnG;;AACA,UAAID,CAAC,IAAE,GAAP,EAAW;AACP,eAAO,GAAP;AACH,OAFD,MAEM,IAAIA,CAAC,GAAC,IAAN,EAAW;AACb,eAAO,IAAP;AACH,OAFK,MAED;AACD,eAAOA,CAAP;AACH;AACJ,KAjBP,EAkBGJ,IAlBH,CAkBQ,WAlBR,EAoBM,UAASC,CAAT,EAAY;AACZ,aAAO,eAAeV,UAAU,CAACU,CAAC,CAACK,QAAF,CAAWC,WAAZ,CAAzB,GAAoD,GAA3D;AACH,KAtBH;AAuBC,GAzBY,EAyBX,CAACvB,UAAU,CAACwB,MAAZ,CAzBW,CAAjB;AA4BA,sBACG;AAAK,IAAA,OAAO,EAAC,aAAb;AAA2B,IAAA,SAAS,EAAC,YAArC;AAAkD,IAAA,GAAG,EAAEb;AAAvD;AAAA;AAAA;AAAA;AAAA,UADH;AAGD;;GArDQb,M;UAsBKH,K;;;KAtBLG,M;AAuDT,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { geoAlbers, geoPath,geoAlbersUsa } from \"d3-geo\"\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\"\nimport { feature } from \"topojson-client\"\n\nfunction Events(data) {\n\n  const [eventsData, setEventsData] = useState([]);\n//   const { list } = props;\n//   const data = props\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./cases.geojson')\n      const eventsDataCombine = await res.json();\n      const eventsData = eventsDataCombine.features;\n      setEventsData(eventsData);\n    })();\n  }, []);\n\nconst projection = geoAlbersUsa()\n    .scale(data.scaleSend)\n    // .scale(1200)\n    .translate([ 960 / 2, 600 / 2 ])\n\n// console.log(data.scaleSend)\n\n  const ref = useD3(\n    (svg) => { \n      svg\n        .selectAll(\".points\")\n        .data(eventsData).enter()\n        .append(\"circle\")\n        .attr(\"class\", \"event\")\n        .attr(\"r\", \n            function (d) { \n                console.log(\"1111\")\n                console.log(d)\n                let r = (d.properties['Number of Civilian Fatalities']+d.properties[\"Number of Civilian Injured\"])/2\n                if (r<=1.5){\n                    return 1.5\n                }else if (r>20.0){\n                    return 20.0\n                }else{\n                    return r\n                }\n            })\n        .attr(\"transform\", \n        \n            function(d) { \n            return \"translate(\" + projection(d.geometry.coordinates) + \")\"\n        })\n      },[eventsData.length]\n  )\n  \n  return (\n     <svg viewBox=\"0 0 960 600\" className=\"Events Map\" ref={ref}></svg>\n  )\n}\n\nexport default Events"]},"metadata":{},"sourceType":"module"}