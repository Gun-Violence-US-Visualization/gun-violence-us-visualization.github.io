{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoEqualEarth, geoPath } from \"d3-geo\";\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projection = geoEqualEarth().scale(160).translate([800 / 2, 450 / 2]);\n\nfunction Map(data) {\n  _s();\n\n  const [statesData, setStatesData] = useState([]); // const [statesTest, setStatesTest] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./us.json');\n      const statesData = await res.json();\n      setStatesData(statesData);\n    })();\n  }, []); // console.log(data)\n\n  const ref = useD3(svg => {\n    svg.attr(\"class\", \"USA\").selectAll(\"path\").data(statesData).enter().append(\"path\").attr(\"class\", \"state\").attr(\"id\", function (d) {\n      return d.id;\n    }).attr(\"d\", function (d) {\n      return d.shape;\n    }).data(data);\n  }, [statesData.length]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: \"0 0 960 600\",\n    className: \"usMap\",\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 6\n  }, this);\n}\n\n_s(Map, \"HGQlez1OJrZ5SCqg76S2m6X37jw=\", false, function () {\n  return [useD3];\n});\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/Map.js"],"names":["React","useState","useEffect","geoEqualEarth","geoPath","useD3","d3","feature","projection","scale","translate","Map","data","statesData","setStatesData","res","fetch","json","ref","svg","attr","selectAll","enter","append","d","id","shape","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,QAAvC;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,MAAMC,UAAU,GAAGL,aAAa,GAC7BM,KADgB,CACV,GADU,EAEhBC,SAFgB,CAEN,CAAE,MAAM,CAAR,EAAW,MAAM,CAAjB,CAFM,CAAnB;;AAKA,SAASC,GAAT,CAAaC,IAAb,EAAkB;AAAA;;AAChB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C,CADgB,CAGhB;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,YAAMa,GAAG,GAAG,MAAMC,KAAK,CAAC,WAAD,CAAvB;AACA,YAAMH,UAAU,GAAG,MAAME,GAAG,CAACE,IAAJ,EAAzB;AACAH,MAAAA,aAAa,CAACD,UAAD,CAAb;AACD,KAJD;AAKD,GANQ,EAMN,EANM,CAAT,CALgB,CAahB;;AAEA,QAAMK,GAAG,GAAGb,KAAK,CACdc,GAAD,IAAS;AACLA,IAAAA,GAAG,CACFC,IADD,CACM,OADN,EACe,KADf,EAECC,SAFD,CAEW,MAFX,EAGCT,IAHD,CAGMC,UAHN,EAICS,KAJD,GAKCC,MALD,CAKQ,MALR,EAMCH,IAND,CAMM,OANN,EAMe,OANf,EAOCA,IAPD,CAOM,IAPN,EAOY,UAASI,CAAT,EAAW;AAAC,aAAOA,CAAC,CAACC,EAAT;AAAY,KAPpC,EAQCL,IARD,CAQM,GARN,EAQW,UAASI,CAAT,EAAW;AAAC,aAAOA,CAAC,CAACE,KAAT;AAAe,KARtC,EASCd,IATD,CASMA,IATN;AAUD,GAZY,EAYX,CAACC,UAAU,CAACc,MAAZ,CAZW,CAAjB;AAeA,sBACG;AAAK,IAAA,OAAO,EAAC,aAAb;AAA2B,IAAA,SAAS,EAAC,OAArC;AAA6C,IAAA,GAAG,EAAET;AAAlD;AAAA;AAAA;AAAA;AAAA,UADH;AAeD;;GA7CQP,G;UAeKN,K;;;KAfLM,G;AA+CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { geoEqualEarth, geoPath } from \"d3-geo\"\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\"\nimport { feature } from \"topojson-client\"\n\nconst projection = geoEqualEarth()\n  .scale(160)\n  .translate([ 800 / 2, 450 / 2 ])\n\n\nfunction Map(data){\n  const [statesData, setStatesData] = useState([]);\n\n  // const [statesTest, setStatesTest] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./us.json')\n      const statesData = await res.json();\n      setStatesData(statesData);\n    })();\n  }, []);\n\n  // console.log(data)\n\n  const ref = useD3(\n    (svg) => {\n        svg\n        .attr(\"class\", \"USA\")\n        .selectAll(\"path\")\n        .data(statesData)\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", \"state\")\n        .attr(\"id\", function(d){return d.id})\n        .attr(\"d\", function(d){return d.shape})\n        .data(data)\n      },[statesData.length]\n  )\n  \n  return (\n     <svg viewBox=\"0 0 960 600\" className=\"usMap\" ref={ref}>\n      {/* {statesData.map((stateData, index) =>\n        <path\n          className=\"state\"\n          id={stateData.id}\n          style={{cursor: \"pointer\"}}\n          key={index}\n          strokeWidth=\"0.5px\"\n          d={stateData.shape} \n        >\n        </path>\n      )} */}\n    </svg>\n  )\n}\n\nexport default Map"]},"metadata":{},"sourceType":"module"}