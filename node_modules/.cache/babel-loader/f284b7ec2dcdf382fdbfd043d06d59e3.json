{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport * as d3 from 'd3';\nimport useDataApi from '../../hooks/useDataApi';\nimport { boroughLegend } from '../../services/legend';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = \"https://d3js.org/us-10m.v1.json\";\n\nconst MapChart = props => {\n  _s();\n\n  let [{\n    data\n  }] = useDataApi(url, []);\n  const svgRef = useRef();\n  const projRef = useRef(d3.geoMercator().center([-73.93, 40.72]).scale(57500));\n  const pathRef = useRef(); // CREATES THE PROJECTION AND RENDERS CHART AND PARKS\n\n  useEffect(() => {\n    // GRAB CURRENT WIDTH/HEIGHT OF DIV ID=\"MAP\"\n    const height = svgRef.current.clientHeight;\n    const width = svgRef.current.clientWidth; // FINE TUNE THE POSITION THE MAP WITHING THE ELEMENT\n\n    projRef.current.translate([width / 2, height / 2]); // ASSING THE GEOPATH A PROJECTION\n\n    pathRef.current = d3.geoPath().projection(projRef.current);\n  }, [data]); // UPDATES THE MAP ONLY IF props.activeParks HAS CHANGED\n\n  useEffect(() => {\n    renderParks(props.activeParks);\n  }, [props.activeParks]); // RENDER THE MAP\n\n  const renderChart = () => {\n    return data[0].features.map((d, i) => {\n      const featurePath = `${pathRef.current(d)}`;\n      return /*#__PURE__*/_jsxDEV(\"path\", {\n        d: featurePath,\n        className: d.properties.name,\n        fill: boroughLegend(d.properties.borough)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this);\n    });\n  }; // RENDER THE PARKS\n\n\n  const renderParks = parks => {\n    const circles = d3.select(svgRef.current).selectAll('.parks').data(parks, d => d.name);\n    circles.enter().append('circle').attr('transform', d => 'translate(' + projRef.current([+d.lon, +d.lat]) + ')').attr('r', 4).attr('class', (d, i) => `parks park-${d.code}`).style('fill', d => d.color).style('opacity', 0).transition().duration(500).style('opacity', 1);\n    circles.exit().transition().duration(500).style('opacity', 0).remove();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    id: \"boroughs-map\",\n    ref: svgRef,\n    children: data.length && renderChart()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MapChart, \"v5XREGht21cLg9glLIw254CAlL8=\", false, function () {\n  return [useDataApi];\n});\n\n_c = MapChart;\nexport default MapChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapChart\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/MapChart.js"],"names":["React","useState","useEffect","useRef","useMemo","d3","useDataApi","boroughLegend","url","MapChart","props","data","svgRef","projRef","geoMercator","center","scale","pathRef","height","current","clientHeight","width","clientWidth","translate","geoPath","projection","renderParks","activeParks","renderChart","features","map","d","i","featurePath","properties","name","borough","parks","circles","select","selectAll","enter","append","attr","lon","lat","code","style","color","transition","duration","exit","remove","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useMemo} from 'react';\nimport * as d3 from 'd3';\nimport useDataApi from '../../hooks/useDataApi';\nimport { boroughLegend } from '../../services/legend'\nimport './styles.css'\nconst url =\"https://d3js.org/us-10m.v1.json\"\n\nconst MapChart = (props) => {\n  let [{ data }] = useDataApi(url,[]);\n  const svgRef = useRef();\n  const projRef = useRef(d3.geoMercator().center([-73.93, 40.72]).scale(57500));\n  const pathRef = useRef()\n\n // CREATES THE PROJECTION AND RENDERS CHART AND PARKS\n  useEffect(() => {\n    // GRAB CURRENT WIDTH/HEIGHT OF DIV ID=\"MAP\"\n    const height = svgRef.current.clientHeight;\n    const width = svgRef.current.clientWidth;\n    // FINE TUNE THE POSITION THE MAP WITHING THE ELEMENT\n     projRef.current.translate([width  / 2, height  / 2 ]);\n    // ASSING THE GEOPATH A PROJECTION\n     pathRef.current = d3.geoPath().projection(projRef.current);\n }, [data]);\n\n// UPDATES THE MAP ONLY IF props.activeParks HAS CHANGED\n  useEffect(() => {\n      renderParks(props.activeParks)\n  },[props.activeParks])\n\n// RENDER THE MAP\n  const renderChart = () => {\n    return data[0].features.map((d,i) => {\n      const featurePath = `${pathRef.current(d)}`\n      return (\n        <path \n            key={i} \n            d={featurePath} \n            className={d.properties.name}\n            fill={boroughLegend(d.properties.borough)}\n        />\n      )\n    })\n};\n\n// RENDER THE PARKS\n  const renderParks = (parks) => {\n    const circles = d3.select(svgRef.current).selectAll('.parks').data(parks, (d) => d.name);\n\n    circles.enter().append('circle')\n      .attr('transform', d => 'translate(' + projRef.current([+d.lon, +d.lat]) + ')')\n      .attr('r', 4)\n      .attr('class', (d, i) => `parks park-${d.code}`)\n      .style('fill', (d) => d.color)\n      .style('opacity', 0)\n    .transition().duration(500).style('opacity',1)\n\n    circles.exit()\n     .transition().duration(500).style('opacity', 0).remove()\n  };\n\n  return (\n    <svg id=\"boroughs-map\" ref={svgRef}>\n      {data.length && renderChart()}\n    </svg>\n  \n  );\n};\n\nexport default MapChart;\n"]},"metadata":{},"sourceType":"module"}