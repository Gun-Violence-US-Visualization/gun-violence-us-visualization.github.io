{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoEqualEarth, geoPath } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projection = geoEqualEarth().scale(160).translate([800 / 2, 450 / 2]);\n\nconst Map = () => {\n  _s();\n\n  const [geographies, setGeographies] = useState([]);\n  useEffect(() => {\n    fetch(\"./static/us.json\").then(response => {\n      if (response.status !== 200) {\n        console.log(`There was a problem: ${response.status}`);\n        return;\n      }\n\n      response.json().then(worlddata => {\n        setGeographies(feature(worlddata, worlddata.objects.countries).features);\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: 800,\n    height: 450,\n    viewBox: \"0 0 800 450\",\n    children: [/*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"countries\",\n      children: geographies.map((d, i) => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: geoPath().projection(projection)(d),\n        className: \"country\",\n        fill: `rgba(38,50,56,${1 / geographies.length * i})`,\n        stroke: \"#FFFFFF\",\n        strokeWidth: 0.5\n      }, `path-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"markers\",\n      children: /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: this.projection()([8, 48])[0],\n        cy: this.projection()([8, 48])[1],\n        r: 10,\n        fill: \"#E91E63\",\n        className: \"marker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"PnYLrfZijy6WbtkJXGPXh46FBOg=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/Map.js"],"names":["React","useState","useEffect","geoEqualEarth","geoPath","feature","projection","scale","translate","Map","geographies","setGeographies","fetch","then","response","status","console","log","json","worlddata","objects","countries","features","map","d","i","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,QAAvC;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,MAAMC,UAAU,GAAGH,aAAa,GAC7BI,KADgB,CACV,GADU,EAEhBC,SAFgB,CAEN,CAAE,MAAM,CAAR,EAAW,MAAM,CAAjB,CAFM,CAAnB;;AAIA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,KAAK,CAAC,kBAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBH,QAAQ,CAACC,MAAO,EAApD;AACA;AACD;;AACDD,MAAAA,QAAQ,CAACI,IAAT,GAAgBL,IAAhB,CAAqBM,SAAS,IAAI;AAChCR,QAAAA,cAAc,CAACN,OAAO,CAACc,SAAD,EAAYA,SAAS,CAACC,OAAV,CAAkBC,SAA9B,CAAP,CAAgDC,QAAjD,CAAd;AACD,OAFD;AAGD,KATH;AAUD,GAXQ,EAWN,EAXM,CAAT;AAaA,sBACE;AAAK,IAAA,KAAK,EAAG,GAAb;AAAmB,IAAA,MAAM,EAAG,GAA5B;AAAkC,IAAA,OAAO,EAAC,aAA1C;AAAA,4BACE;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA,gBAEIZ,WAAW,CAACa,GAAZ,CAAgB,CAACC,CAAD,EAAGC,CAAH,kBACd;AAEE,QAAA,CAAC,EAAGrB,OAAO,GAAGE,UAAV,CAAqBA,UAArB,EAAiCkB,CAAjC,CAFN;AAGE,QAAA,SAAS,EAAC,SAHZ;AAIE,QAAA,IAAI,EAAI,iBAAiB,IAAId,WAAW,CAACgB,MAAhB,GAAyBD,CAAE,GAJtD;AAKE,QAAA,MAAM,EAAC,SALT;AAME,QAAA,WAAW,EAAG;AANhB,SACS,QAAQA,CAAG,EADpB;AAAA;AAAA;AAAA;AAAA,cADF;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAG,MAAA,SAAS,EAAC,SAAb;AAAA,6BACE;AACE,QAAA,EAAE,EAAG,KAAKnB,UAAL,GAAkB,CAAC,CAAD,EAAG,EAAH,CAAlB,EAA0B,CAA1B,CADP;AAEE,QAAA,EAAE,EAAG,KAAKA,UAAL,GAAkB,CAAC,CAAD,EAAG,EAAH,CAAlB,EAA0B,CAA1B,CAFP;AAGE,QAAA,CAAC,EAAG,EAHN;AAIE,QAAA,IAAI,EAAC,SAJP;AAKE,QAAA,SAAS,EAAC;AALZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CA3CD;;GAAMG,G;;KAAAA,G;AA6CN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { geoEqualEarth, geoPath } from \"d3-geo\"\nimport { feature } from \"topojson-client\"\n\nconst projection = geoEqualEarth()\n  .scale(160)\n  .translate([ 800 / 2, 450 / 2 ])\n\nconst Map = () => {\n  const [geographies, setGeographies] = useState([])\n\n  useEffect(() => {\n    fetch(\"./static/us.json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          setGeographies(feature(worlddata, worlddata.objects.countries).features)\n        })\n      })\n  }, [])\n\n  return (\n    <svg width={ 800 } height={ 450 } viewBox=\"0 0 800 450\">\n      <g className=\"countries\">\n        {\n          geographies.map((d,i) => (\n            <path\n              key={ `path-${ i }` }\n              d={ geoPath().projection(projection)(d) }\n              className=\"country\"\n              fill={ `rgba(38,50,56,${ 1 / geographies.length * i})` }\n              stroke=\"#FFFFFF\"\n              strokeWidth={ 0.5 }\n            />\n          ))\n        }\n      </g>\n      <g className=\"markers\">\n        <circle\n          cx={ this.projection()([8,48])[0] }\n          cy={ this.projection()([8,48])[1] }\n          r={ 10 }\n          fill=\"#E91E63\"\n          className=\"marker\"\n        />\n      </g>\n    </svg>\n  )\n}\n\nexport default Map"]},"metadata":{},"sourceType":"module"}