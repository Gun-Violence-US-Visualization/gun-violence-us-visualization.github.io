{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Statistics.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Statistics(data) {\n  _s();\n\n  const [statesData, setStatesData] = useState([]); //react用来注释数据\n\n  const ref = React.useRef(null); // console.log(data)\n\n  useEffect(() => {\n    (async () => {\n      // set the dimensions and margins of the graph\n      const margin = {\n        top: 10,\n        right: 30,\n        bottom: 30,\n        left: 60\n      },\n            width = ref.current.clientWidth - 30,\n            height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n      const svg = d3.select(\".usStatistics\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`); //Read the data\n\n      d3.csv(\"./data/date2.csv\", function (error, csvdata) {\n        if (error) {\n          console.log(error);\n        }\n\n        console.log(csvdata);\n      }, // When reading the csv, I must format variables:\n      function (d) {\n        return {\n          date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n          value: d.value\n        };\n      }).then( // Now I can use this dataset:\n      function (data) {\n        console.log(data); // Add X axis --> it is a date format\n\n        const x = d3.scaleTime().domain(d3.extent(data, function (d) {\n          return d.date;\n        })).range([0, width]);\n        const xAxis = svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(d3.axisBottom(x)); // Add Y axis\n\n        const y = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n          return +d.value;\n        })]).range([height, 0]);\n        const yAxis = svg.append(\"g\").call(d3.axisLeft(y)); // Add a clipPath: everything out of this area won't be drawn.\n\n        const clip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0); // Add brushing\n\n        const brush = d3.brushX() // Add the brush feature using the d3.brush function\n        .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n        .on(\"end\", updateChart); // Each time the brush selection changes, trigger the 'updateChart' function\n        // Create the line variable: where both the line and the brush take place\n\n        const line = svg.append('g').attr(\"clip-path\", \"url(#clip)\"); // Add the line\n\n        line.append(\"path\").datum(data).attr(\"class\", \"line\") // I add the class line to be able to modify this line later on.\n        .attr(\"fill\", \"none\").attr(\"stroke\", \"#a52723\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n          return x(d.date);\n        }).y(function (d) {\n          return y(d.value);\n        })); // Add the brushing\n\n        line.append(\"g\").attr(\"class\", \"brush\").call(brush); // A function that set idleTimeOut to null\n\n        let idleTimeout;\n\n        function idled() {\n          idleTimeout = null;\n        } // A function that update the chart for given boundaries\n\n\n        function updateChart(event, d) {\n          // What are the selected boundaries?\n          const extent = event.selection; // If no selection, back to initial coordinate. Otherwise, update X axis domain\n\n          if (!extent) {\n            if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n\n            x.domain([4, 8]);\n          } else {\n            x.domain([x.invert(extent[0]), x.invert(extent[1])]);\n            line.select(\".brush\").call(brush.move, null); // This remove the grey brush area as soon as the selection has been done\n          } // Update axis and line position\n\n\n          xAxis.transition().duration(1000).call(d3.axisBottom(x));\n          line.select('.line').transition().duration(1000).attr(\"d\", d3.line().x(function (d) {\n            return x(d.date);\n          }).y(function (d) {\n            return y(d.value);\n          }));\n        } // If user double click, reinitialize the chart\n\n\n        svg.on(\"dblclick\", function () {\n          x.domain(d3.extent(data, function (d) {\n            return d.date;\n          }));\n          xAxis.transition().call(d3.axisBottom(x));\n          line.select('.line').transition().attr(\"d\", d3.line().x(function (d) {\n            return x(d.date);\n          }).y(function (d) {\n            return y(d.value);\n          }));\n        });\n      });\n    })();\n  }, [statesData.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"down-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-title\",\n      children: \"TITLE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"down-chart usStatistics\",\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"down-chart-example\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./media/time-line.svg\",\n        width: \"95%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 41\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this) //渲染了这个东西出来\n  ;\n}\n\n_s(Statistics, \"6lPwhkhbwAf/KMa22COnjFPL+Eg=\");\n\n_c = Statistics;\nexport default Statistics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Statistics\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Statistics.js"],"names":["React","useState","useEffect","d3","Statistics","data","statesData","setStatesData","ref","useRef","margin","top","right","bottom","left","width","current","clientWidth","height","svg","select","append","attr","csv","error","csvdata","console","log","d","date","timeParse","value","then","x","scaleTime","domain","extent","range","xAxis","call","axisBottom","y","scaleLinear","max","yAxis","axisLeft","clip","brush","brushX","on","updateChart","line","datum","idleTimeout","idled","event","selection","setTimeout","invert","move","transition","duration","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport * as d3 from \"d3\"\r\n\r\nfunction Statistics(data) {\r\n  const [statesData, setStatesData] = useState([]);     //react用来注释数据\r\n  const ref = React.useRef(null)\r\n  // console.log(data)\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n\r\n      // set the dimensions and margins of the graph\r\n      const margin = { top: 10, right: 30, bottom: 30, left: 60 },\r\n        width = ref.current.clientWidth-30,\r\n        height = 400 - margin.top - margin.bottom;\r\n\r\n      // append the svg object to the body of the page\r\n      const svg = d3.select(\".usStatistics\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", width + margin.left + margin.right)\r\n        .attr(\"height\", height + margin.top + margin.bottom)\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n\r\n      //Read the data\r\n      d3.csv(\"./data/date2.csv\", function (error, csvdata) {\r\n\r\n        if (error) {\r\n          console.log(error);\r\n        }\r\n        console.log(csvdata);\r\n      },\r\n        // When reading the csv, I must format variables:\r\n        function (d) {\r\n          return { date: d3.timeParse(\"%Y-%m-%d\")(d.date), value: d.value }\r\n        }).then(\r\n          // Now I can use this dataset:\r\n          function (data) {\r\n            console.log(data)\r\n            // Add X axis --> it is a date format\r\n            const x = d3.scaleTime()\r\n              .domain(d3.extent(data, function (d) { return d.date; }))\r\n              .range([0, width]);\r\n            const xAxis = svg.append(\"g\")\r\n              .attr(\"transform\", `translate(0, ${height})`)\r\n              .call(d3.axisBottom(x));\r\n\r\n            // Add Y axis\r\n            const y = d3.scaleLinear()\r\n              .domain([0, d3.max(data, function (d) { return +d.value; })])\r\n              .range([height, 0]);\r\n            const yAxis = svg.append(\"g\")\r\n              .call(d3.axisLeft(y));\r\n\r\n            // Add a clipPath: everything out of this area won't be drawn.\r\n            const clip = svg.append(\"defs\").append(\"svg:clipPath\")\r\n              .attr(\"id\", \"clip\")\r\n              .append(\"svg:rect\")\r\n              .attr(\"width\", width)\r\n              .attr(\"height\", height)\r\n              .attr(\"x\", 0)\r\n              .attr(\"y\", 0);\r\n\r\n            // Add brushing\r\n            const brush = d3.brushX()                   // Add the brush feature using the d3.brush function\r\n              .extent([[0, 0], [width, height]])  // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\r\n              .on(\"end\", updateChart)               // Each time the brush selection changes, trigger the 'updateChart' function\r\n\r\n            // Create the line variable: where both the line and the brush take place\r\n            const line = svg.append('g')\r\n              .attr(\"clip-path\", \"url(#clip)\")\r\n\r\n            // Add the line\r\n            line.append(\"path\")\r\n              .datum(data)\r\n              .attr(\"class\", \"line\")  // I add the class line to be able to modify this line later on.\r\n              .attr(\"fill\", \"none\")\r\n              .attr(\"stroke\", \"#a52723\")\r\n              .attr(\"stroke-width\", 1.5)\r\n              .attr(\"d\", d3.line()\r\n                .x(function (d) { return x(d.date) })\r\n                .y(function (d) { return y(d.value) })\r\n              )\r\n\r\n            // Add the brushing\r\n            line\r\n              .append(\"g\")\r\n              .attr(\"class\", \"brush\")\r\n              .call(brush);\r\n\r\n            // A function that set idleTimeOut to null\r\n            let idleTimeout\r\n            function idled() { idleTimeout = null; }\r\n\r\n            // A function that update the chart for given boundaries\r\n            function updateChart(event, d) {\r\n\r\n              // What are the selected boundaries?\r\n              const extent = event.selection\r\n\r\n              // If no selection, back to initial coordinate. Otherwise, update X axis domain\r\n              if (!extent) {\r\n                if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\r\n                x.domain([4, 8])\r\n              } else {\r\n                x.domain([x.invert(extent[0]), x.invert(extent[1])])\r\n                line.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\r\n              }\r\n\r\n              // Update axis and line position\r\n              xAxis.transition().duration(1000).call(d3.axisBottom(x))\r\n              line\r\n                .select('.line')\r\n                .transition()\r\n                .duration(1000)\r\n                .attr(\"d\", d3.line()\r\n                  .x(function (d) { return x(d.date) })\r\n                  .y(function (d) { return y(d.value) })\r\n                )\r\n            }\r\n            // If user double click, reinitialize the chart\r\n            svg.on(\"dblclick\", function () {\r\n              x.domain(d3.extent(data, function (d) { return d.date; }))\r\n              xAxis.transition().call(d3.axisBottom(x))\r\n              line\r\n                .select('.line')\r\n                .transition()\r\n                .attr(\"d\", d3.line()\r\n                  .x(function (d) { return x(d.date) })\r\n                  .y(function (d) { return y(d.value) })\r\n                )\r\n            });\r\n          })\r\n    })();\r\n  }, [statesData.length]\r\n  )\r\n\r\n  return (\r\n    <div className=\"down-chart-container\">\r\n    <div className=\"chart-title\">TITLE</div>\r\n    <div className=\"down-chart usStatistics\" ref={ref}></div> \r\n    <div className=\"down-chart-example\"><img src=\"./media/time-line.svg\" width=\"95%\"/> </div>\r\n    </div>    //渲染了这个东西出来\r\n  )\r\n}\r\n\r\nexport default Statistics"]},"metadata":{},"sourceType":"module"}