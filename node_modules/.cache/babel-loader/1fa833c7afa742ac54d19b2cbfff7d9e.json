{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoEqualEarth, geoPath } from \"d3-geo\";\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\"; // const projection = geoEqualEarth()\n//   .scale(160)\n//   .translate([ 800 / 2, 450 / 2 ])\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projection = geoAlbersUsa().scale(960).translate([960 / 2, 600 / 2]);\n\nfunction Map(data) {\n  _s();\n\n  const [statesData, setStatesData] = useState([]); // console.log(data)\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./us.json');\n      const statesData = await res.json();\n      setStatesData(statesData);\n    })();\n  }, []);\n  const ref = useD3(svg => {\n    svg.selectAll(\"path\").data(statesData).enter().append(\"path\").attr(\"class\", \"state\").attr(\"id\", function (d) {\n      return d.id;\n    }).attr(\"d\", function (d) {\n      return d.shape;\n    }).style(\"opacity\", function (d) {\n      for (let i = 0; i < data.data1.length; i++) {\n        if (data.data1[i].id == d.id) {\n          // console.log(data1.data1[i].num)\n          return data.data1[i].num + 0.05;\n        }\n      }\n    }).style(\"fill\", function (d) {\n      for (let i = 0; i < data.data2.length; i++) {\n        if (data.data2[i].id == d.id) {\n          // console.log(data2.data2[i].num)\n          if (data.data2[i].num >= 0.5) {\n            return \"#9865ff\"; // return \"#171edc\"\n          } else {\n            return \"#f9ff66\"; // return \"#f8e426\"\n          }\n        }\n      }\n    });\n    svg.selectAll(\".points\").data(eventsData).enter().append(\"circle\").attr(\"r\", function (d) {\n      return 3;\n    }).style(\"fill\", \"#9865ff\").attr(\"transform\", function (d) {\n      console.log(d); // if (d.properties.State == \"Alaska\"){\n      //     return \"translate(\" + projection([\n      //         -117.1281628,\n      //         32.86357277\n      //     ]) + \")\"\n      // }else if(d.properties.State == \"Hawaii\"){\n      //     return \"translate(\" + projection([\n      //         -117.1281628,\n      //         32.86357277\n      //     ]) + \")\" \n      // }else{\n\n      return \"translate(\" + projection(d.geometry.coordinates) + \")\"; // }\n    });\n  }, [statesData.length]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: \"0 0 960 600\",\n    className: \"usMap\",\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 6\n  }, this);\n}\n\n_s(Map, \"HGQlez1OJrZ5SCqg76S2m6X37jw=\", false, function () {\n  return [useD3];\n});\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Map.js"],"names":["React","useState","useEffect","geoEqualEarth","geoPath","useD3","d3","feature","projection","geoAlbersUsa","scale","translate","Map","data","statesData","setStatesData","res","fetch","json","ref","svg","selectAll","enter","append","attr","d","id","shape","style","i","data1","length","num","data2","eventsData","console","log","geometry","coordinates"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { geoEqualEarth, geoPath } from \"d3-geo\"\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\"\nimport { feature } from \"topojson-client\"\n\n// const projection = geoEqualEarth()\n//   .scale(160)\n//   .translate([ 800 / 2, 450 / 2 ])\nconst projection = geoAlbersUsa()\n  .scale(960)\n  .translate([ 960 / 2, 600 / 2 ])\n\n\nfunction Map(data) {\n  const [statesData, setStatesData] = useState([]);\n  // console.log(data)\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./us.json')\n      const statesData = await res.json();\n      setStatesData(statesData);\n    })();\n  }, []);\n\n  const ref = useD3(\n    (svg) => { \n      svg\n        .selectAll(\"path\")\n        .data(statesData)\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", \"state\")\n        .attr(\"id\", function(d){return d.id})\n        .attr(\"d\", function(d){return d.shape})\n        .style(\n        \"opacity\", \n        function(d){\n          for (let i = 0; i < data.data1.length ; i++){\n            if (data.data1[i].id == d.id) {\n              // console.log(data1.data1[i].num)\n              return data.data1[i].num + 0.05\n            }\n          } \n        })\n        .style(\n        \"fill\", \n        function(d){\n          for (let i = 0; i < data.data2.length ; i++){\n            if (data.data2[i].id == d.id) {\n              // console.log(data2.data2[i].num)\n              if (data.data2[i].num>=0.5){\n                return \"#9865ff\"\n                // return \"#171edc\"\n              }else{\n                return \"#f9ff66\"\n                // return \"#f8e426\"\n              }\n            }\n          } \n        })\n\n        svg\n        .selectAll(\".points\")\n        .data(eventsData).enter()\n        .append(\"circle\")\n        .attr(\"r\", \n            function (d) { \n                return 3\n            })\n        .style(\n            \"fill\",\"#9865ff\"\n        )\n        .attr(\"transform\", \n            function(d) { \n                console.log(d)\n                // if (d.properties.State == \"Alaska\"){\n                //     return \"translate(\" + projection([\n                //         -117.1281628,\n                //         32.86357277\n                //     ]) + \")\"\n                // }else if(d.properties.State == \"Hawaii\"){\n                //     return \"translate(\" + projection([\n                //         -117.1281628,\n                //         32.86357277\n                //     ]) + \")\" \n                // }else{\n                return \"translate(\" + projection(d.geometry.coordinates) + \")\" \n                // }\n            })\n      \n      },[statesData.length]\n  )\n  \n  return (\n     <svg viewBox=\"0 0 960 600\" className=\"usMap\" ref={ref}></svg>\n  )\n}\n\nexport default Map"]},"metadata":{},"sourceType":"module"}