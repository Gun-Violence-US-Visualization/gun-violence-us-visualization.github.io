{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoEqualEarth, geoPath } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projection = geoEqualEarth().scale(160).translate([800 / 2, 450 / 2]);\n\nconst Map = () => {\n  _s();\n\n  const [geographies, setGeographies] = useState([]);\n  useEffect(() => {\n    fetch(\"./static/us.json\").then(response => {\n      if (response.status !== 200) {\n        console.log(`There was a problem: ${response.status}`);\n        return;\n      }\n\n      response.json().then(us => {\n        setGeographies(feature(us, us.objects.states).features);\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: \"0 0 960 600\",\n    children: statesData.map((stateData, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"someCSSClass\",\n      style: {\n        cursor: \"pointer\",\n        fill: \"orange\"\n      },\n      stroke: \"#fff\",\n      strokeWidth: \"6px\",\n      d: stateData.shape,\n      onMouseOver: event => {\n        event.target.style.fill = 'red';\n      },\n      onMouseOut: event => {\n        event.target.style.fill = 'orange';\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 6\n  }, this);\n};\n\n_s(Map, \"PnYLrfZijy6WbtkJXGPXh46FBOg=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/Map.js"],"names":["React","useState","useEffect","geoEqualEarth","geoPath","feature","projection","scale","translate","Map","geographies","setGeographies","fetch","then","response","status","console","log","json","us","objects","states","features","statesData","map","stateData","index","cursor","fill","shape","event","target","style"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,QAAvC;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,MAAMC,UAAU,GAAGH,aAAa,GAC7BI,KADgB,CACV,GADU,EAEhBC,SAFgB,CAEN,CAAE,MAAM,CAAR,EAAW,MAAM,CAAjB,CAFM,CAAnB;;AAIA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,KAAK,CAAC,kBAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBH,QAAQ,CAACC,MAAO,EAApD;AACA;AACD;;AACDD,MAAAA,QAAQ,CAACI,IAAT,GAAgBL,IAAhB,CAAqBM,EAAE,IAAI;AACzBR,QAAAA,cAAc,CAACN,OAAO,CAACc,EAAD,EAAKA,EAAE,CAACC,OAAH,CAAWC,MAAhB,CAAP,CAA+BC,QAAhC,CAAd;AACD,OAFD;AAGD,KATH;AAUD,GAXQ,EAWN,EAXM,CAAT;AAeA,sBAEG;AAAK,IAAA,OAAO,EAAC,aAAb;AAAA,cACEC,UAAU,CAACC,GAAX,CAAe,CAACC,SAAD,EAAYC,KAAZ,kBACd;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE,SAAT;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAFT;AAIE,MAAA,MAAM,EAAC,MAJT;AAKE,MAAA,WAAW,EAAC,KALd;AAME,MAAA,CAAC,EAAEH,SAAS,CAACI,KANf;AAOE,MAAA,WAAW,EAAGC,KAAD,IAAW;AACtBA,QAAAA,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBJ,IAAnB,GAA0B,KAA1B;AACD,OATH;AAUE,MAAA,UAAU,EAAGE,KAAD,IAAW;AACrBA,QAAAA,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBJ,IAAnB,GAA0B,QAA1B;AACD;AAZH,OAGOF,KAHP;AAAA;AAAA;AAAA;AAAA,YADD;AADF;AAAA;AAAA;AAAA;AAAA,UAFH;AAsBD,CAxCD;;GAAMjB,G;;KAAAA,G;AA0CN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { geoEqualEarth, geoPath } from \"d3-geo\"\nimport { feature } from \"topojson-client\"\n\nconst projection = geoEqualEarth()\n  .scale(160)\n  .translate([ 800 / 2, 450 / 2 ])\n\nconst Map = () => {\n  const [geographies, setGeographies] = useState([])\n\n  useEffect(() => {\n    fetch(\"./static/us.json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(us => {\n          setGeographies(feature(us, us.objects.states).features)\n        })\n      })\n  }, [])\n\n  \n\n  return (\n    \n     <svg viewBox=\"0 0 960 600\">\n      {statesData.map((stateData, index) =>\n        <path\n          className=\"someCSSClass\"\n          style={{cursor: \"pointer\", fill: \"orange\"}}\n          key={index}\n          stroke=\"#fff\"\n          strokeWidth=\"6px\"\n          d={stateData.shape}\n          onMouseOver={(event) => {\n            event.target.style.fill = 'red';\n          }}\n          onMouseOut={(event) => {\n            event.target.style.fill = 'orange';\n          }}\n        >\n        </path>\n      )}\n    </svg>\n  )\n}\n\nexport default Map"]},"metadata":{},"sourceType":"module"}