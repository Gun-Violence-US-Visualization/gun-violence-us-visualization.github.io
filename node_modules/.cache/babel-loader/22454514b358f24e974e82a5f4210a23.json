{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport { useD3 } from './hooks/useD3';\nimport useDataApi from '../../hooks/useDataApi';\nimport React from 'react';\nimport * as topojson from 'topojson';\nimport * as d3 from 'd3';\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = 'https://raw.githubusercontent.com/jkeohan/D3-Tutorials/3f3e4fb52aea827455fd4cc7c4893eb37f58e411/nyc.counties.json';\n\nconst MapChart = props => {\n  _s();\n\n  const [{\n    data\n  }] = useDataApi(url, []);\n  const svgRef = useRef();\n  const projRef = useRef(d3.geoMercator().center([-73.93, 40.72]).scale(57500)); // CREATES THE PROJECTION AND RENDERS CHART AND PARKS\n\n  useEffect(() => {\n    // GRAB CURRENT WIDTH/HEIGHT OF DIV ID=\"MAP\"\n    const height = svgRef.current.clientHeight;\n    const width = svgRef.current.clientWidth; // FINE TUNE THE POSITION THE MAP WITHING THE ELEMENT\n\n    projRef.current.translate([width / 2, height / 2]); // ASSING THE PROJECTION A PROJECTION\n\n    const path = d3.geoPath().projection(projRef.current);\n\n    if (data.length) {\n      renderChart(data[0].features, path);\n    }\n  }, [data]);\n\n  const renderChart = (data, path) => {\n    d3.select(\"svg\").append(\"g\").attr(\"class\", \"states\").selectAll(\"path\").data(data).enter().append(\"path\").attr(\"d\", path); // svg.append(\"path\")\n    //             .attr(\"class\", \"state-borders\")\n    //             .attr(\"d\", path(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; })));\n  }; // const ref = useD3(\n  //     (map) => {\n  //         const svg = d3.select(\"body\").append(\"svg\")\n  //             .attr(\"width\", 960)\n  //             .attr(\"height\", 600);\n  //         const path = d3.geoPath();\n  //             d3.json(\"https://d3js.org/us-10m.v1.json\", function(error, us) {\n  //             if (error) throw error;\n  //             });\n  //     }\n  // );\n\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    id: \"boroughs-map\",\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MapChart, \"TkPm/Aa968lni4FgckNMIfcoPHo=\", false, function () {\n  return [useDataApi];\n});\n\n_c = MapChart;\nexport default MapChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapChart\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/MapChart.js"],"names":["useD3","useDataApi","React","topojson","d3","url","MapChart","props","data","svgRef","useRef","projRef","geoMercator","center","scale","useEffect","height","current","clientHeight","width","clientWidth","translate","path","geoPath","projection","length","renderChart","features","select","append","attr","selectAll","enter"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,eAAtB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,aAAP;;AAEA,MAAMC,GAAG,GAAI,mHAAb;;AAGA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAExB,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,IAAaP,UAAU,CAACI,GAAD,EAAK,EAAL,CAA7B;AACA,QAAMI,MAAM,GAAGC,MAAM,EAArB;AACA,QAAMC,OAAO,GAAGD,MAAM,CAACN,EAAE,CAACQ,WAAH,GAAiBC,MAAjB,CAAwB,CAAC,CAAC,KAAF,EAAS,KAAT,CAAxB,EAAyCC,KAAzC,CAA+C,KAA/C,CAAD,CAAtB,CAJwB,CAMxB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMC,MAAM,GAAGP,MAAM,CAACQ,OAAP,CAAeC,YAA9B;AACA,UAAMC,KAAK,GAAGV,MAAM,CAACQ,OAAP,CAAeG,WAA7B,CAHY,CAIZ;;AACAT,IAAAA,OAAO,CAACM,OAAR,CAAgBI,SAAhB,CAA0B,CAACF,KAAK,GAAI,CAAV,EAAaH,MAAM,GAAI,CAAvB,CAA1B,EALY,CAOZ;;AACA,UAAMM,IAAI,GAAGlB,EAAE,CAACmB,OAAH,GAAaC,UAAb,CAAwBb,OAAO,CAACM,OAAhC,CAAb;;AACA,QAAIT,IAAI,CAACiB,MAAT,EAAiB;AACjBC,MAAAA,WAAW,CAAClB,IAAI,CAAC,CAAD,CAAJ,CAAQmB,QAAT,EAAmBL,IAAnB,CAAX;AACC;AACJ,GAZQ,EAYN,CAACd,IAAD,CAZM,CAAT;;AAcA,QAAMkB,WAAW,GAAG,CAAClB,IAAD,EAAOc,IAAP,KAAgB;AAChClB,IAAAA,EAAE,CAACwB,MAAH,CAAU,KAAV,EAAiBC,MAAjB,CAAwB,GAAxB,EACKC,IADL,CACU,OADV,EACmB,QADnB,EAEKC,SAFL,CAEe,MAFf,EAGKvB,IAHL,CAGUA,IAHV,EAIKwB,KAJL,GAIaH,MAJb,CAIoB,MAJpB,EAKKC,IALL,CAKU,GALV,EAKeR,IALf,EADgC,CAQhC;AACA;AACA;AACD,GAXH,CArBwB,CAkCxB;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AAEA;AACA;;;AACA,sBACI;AAAK,IAAA,EAAE,EAAC,cAAR;AAAuB,IAAA,GAAG,EAAEb;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAtDD;;GAAMH,Q;UAEiBL,U;;;KAFjBK,Q;AAwDN,eAAeA,QAAf","sourcesContent":["import { useD3 } from './hooks/useD3';\nimport useDataApi from '../../hooks/useDataApi';\nimport React from 'react';\nimport * as topojson from 'topojson';\nimport * as d3 from 'd3';\nimport \"./index.css\";\n\nconst url =  'https://raw.githubusercontent.com/jkeohan/D3-Tutorials/3f3e4fb52aea827455fd4cc7c4893eb37f58e411/nyc.counties.json'\n\n\nconst MapChart = (props) => {\n\n    const [{ data }] = useDataApi(url,[]);\n    const svgRef = useRef();\n    const projRef = useRef(d3.geoMercator().center([-73.93, 40.72]).scale(57500));\n    \n    // CREATES THE PROJECTION AND RENDERS CHART AND PARKS\n    useEffect(() => {\n        // GRAB CURRENT WIDTH/HEIGHT OF DIV ID=\"MAP\"\n        const height = svgRef.current.clientHeight;\n        const width = svgRef.current.clientWidth;\n        // FINE TUNE THE POSITION THE MAP WITHING THE ELEMENT\n        projRef.current.translate([width  / 2, height  / 2 ]);\n    \n        // ASSING THE PROJECTION A PROJECTION\n        const path = d3.geoPath().projection(projRef.current);\n        if (data.length) {\n        renderChart(data[0].features, path);\n        }\n    }, [data]);\n\n    const renderChart = (data, path) => {\n        d3.select(\"svg\").append(\"g\")\n            .attr(\"class\", \"states\")\n            .selectAll(\"path\")\n            .data(data)\n            .enter().append(\"path\")\n            .attr(\"d\", path);\n                \n        // svg.append(\"path\")\n        //             .attr(\"class\", \"state-borders\")\n        //             .attr(\"d\", path(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; })));\n      };\n\n    // const ref = useD3(\n    //     (map) => {\n    //         const svg = d3.select(\"body\").append(\"svg\")\n    //             .attr(\"width\", 960)\n    //             .attr(\"height\", 600);\n\n    //         const path = d3.geoPath();\n\n\n    //             d3.json(\"https://d3js.org/us-10m.v1.json\", function(error, us) {\n    //             if (error) throw error;\n                \n                \n    //             });\n            \n    //     }\n    // );\n    return (\n        <svg id=\"boroughs-map\" ref={svgRef}></svg>\n    );\n}\n\nexport default MapChart;\n\n"]},"metadata":{},"sourceType":"module"}