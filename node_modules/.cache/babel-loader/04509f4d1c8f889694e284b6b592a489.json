{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/MapCharts.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { geoEqualEarth, geoPath } from \"d3-geo\";\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projection = geoEqualEarth().scale(160).translate([800 / 2, 450 / 2]);\n\nfunction DataProcess() {\n  //   const [statesData, setStatesData] = useState([]);\n  //   useEffect(() => {\n  //     (async () => {\n  //       const res = await fetch('./colorTest.json')\n  //       const statesData = await res.json();\n  //       setStatesData(statesData);\n  //     })();\n  //   }, []);\n  //   const svg = d3.select(\".usMap\");\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => {\n      d3.json(\"./colorTest.json\", function (error, us) {\n        if (error) throw error;\n        svg.selectAll(\"path\").data(feature(us, us.num).features);\n      });\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_c = DataProcess;\nexport default DataProcess;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataProcess\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project/gun-violence-us-visualization/src/MapCharts.js"],"names":["React","useState","useEffect","geoEqualEarth","geoPath","d3","feature","projection","scale","translate","DataProcess","json","error","us","svg","selectAll","data","num","features"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,QAAvC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,MAAMC,UAAU,GAAGJ,aAAa,GAC7BK,KADgB,CACV,GADU,EAEhBC,SAFgB,CAEN,CAAE,MAAM,CAAR,EAAW,MAAM,CAAjB,CAFM,CAAnB;;AAKA,SAASC,WAAT,GAAsB;AACtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEE,sBACE;AACI,IAAA,OAAO,EAAE,MAAI;AACTL,MAAAA,EAAE,CAACM,IAAH,CAAQ,kBAAR,EAA4B,UAASC,KAAT,EAAgBC,EAAhB,EAAoB;AAC5C,YAAID,KAAJ,EAAW,MAAMA,KAAN;AAEXE,QAAAA,GAAG,CAACC,SAAJ,CAAc,MAAd,EACKC,IADL,CACUV,OAAO,CAACO,EAAD,EAAKA,EAAE,CAACI,GAAR,CAAP,CAAoBC,QAD9B;AAIC,OAPL;AAQH;AAVL;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;KA7BQR,W;AA+BT,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { geoEqualEarth, geoPath } from \"d3-geo\"\nimport * as d3 from \"d3\"\nimport { feature } from \"topojson-client\"\n\nconst projection = geoEqualEarth()\n  .scale(160)\n  .translate([ 800 / 2, 450 / 2 ])\n\n\nfunction DataProcess(){\n//   const [statesData, setStatesData] = useState([]);\n\n//   useEffect(() => {\n//     (async () => {\n//       const res = await fetch('./colorTest.json')\n//       const statesData = await res.json();\n//       setStatesData(statesData);\n//     })();\n//   }, []);\n\n//   const svg = d3.select(\".usMap\");\n\n  return (\n    <button \n        onClick={()=>{\n            d3.json(\"./colorTest.json\", function(error, us) {\n                if (error) throw error;\n\n                svg.selectAll(\"path\")\n                    .data(feature(us, us.num).features)\n                    \n\n                });\n        }}\n    >\n    </button>\n  )\n\n}\n\nexport default DataProcess"]},"metadata":{},"sourceType":"module"}