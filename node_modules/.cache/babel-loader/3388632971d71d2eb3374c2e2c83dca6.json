{"ast":null,"code":"var _jsxFileName = \"/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useLayoutEffect } from \"react\"; // import { geoEqualEarth, geoPath } from \"d3-geo\"\n\nimport { geoAlbers, geoPath, geoAlbersUsa } from \"d3-geo\";\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\"; // const projection = geoEqualEarth()\n//   .scale(160)\n//   .translate([ 800 / 2, 450 / 2 ])\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Map(props) {\n  _s();\n\n  const ref = React.useRef(null);\n  const [statesData, setStatesData] = useState([]);\n  const [scaleData, setScaleData] = useState(props.scaleSend);\n  const [eventsData, setEventsData] = useState([]); // let projection = geoAlbersUsa()\n  // .scale(scaleData)\n  // .translate([ 960 / 2, 600 / 2 ])\n  // console.log(`OUT${scaleData}`)\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('./gz_2010_us_040_00_500k.json');\n      const statesDataCombine = await res.json();\n      const statesData = statesDataCombine.features;\n      setStatesData(statesData);\n      setScaleData(props.scaleSend);\n      const res1 = await fetch('./cases.geojson');\n      const eventsDataCombine = await res1.json();\n      const eventsData = eventsDataCombine.features;\n      setEventsData(eventsData);\n      const projection = geoAlbersUsa().scale(scaleData).translate([960 / 2, 600 / 2]);\n      const chartEl = d3.select(ref.current);\n      chartEl.selectAll(\"*\").remove();\n      const chart = chartEl.append(\"g\");\n      const path = d3.geoPath().projection(projection);\n      var tip = d3 - tip().attr('class', 'd3-tip').offset([-10, 0]).html(d => {\n        return \"<strong>Country: </strong><span class='details'>\" + d.properties.name + \"<br></span>\";\n      }); // console.log(scaleData);\n\n      const myColor = d3.scaleLinear().domain([1, 10]).range([\"white\", \"#9865ff\"]);\n      chart.selectAll(\"path\").data(statesData).enter().append(\"path\").attr(\"class\", \"state\").attr(\"id\", function (d) {\n        return d.properties.NAME;\n      }).attr(\"d\", path) // .style(\"fill\", \"steelblue\");\n      // .style(\n      //     \"opacity\", \n      //     function(d){\n      //       for (let i = 0; i < props.data1.length ; i++){\n      //         if (props.data1[i].name == d.properties.NAME) {\n      //           // console.log(data1.data1[i].num)\n      //           return props.data1[i].num + 0.05\n      //         }\n      //       } \n      //     })\n      .style(\"fill\", function (d) {\n        for (let i = 0; i < props.data2.length; i++) {\n          if (props.data2[i].name == d.properties.NAME) {\n            // console.log(myColor(props.data2[i]))\n            console.log(`Here${myColor(props.data2[i].num * 10)}`);\n            console.log(`Here${i}`);\n            console.log(`Here${props.data2[i].num}`);\n            return myColor(props.data2[i].num * 10);\n          }\n        }\n      });\n      chart.selectAll(\".points\").data(eventsData).enter().append(\"circle\").attr(\"class\", \"event\").attr(\"r\", function (d) {\n        // console.log(d)\n        return 4.0; // }\n      }).attr(\"transform\", function (d) {\n        // console.log(d)\n        return \"translate(\" + projection(d.geometry.coordinates) + \")\";\n      });\n    })();\n  }, [statesData.length]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: \"0 0 960 600\",\n    className: \"usMap Map\",\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 6\n  }, this);\n}\n\n_s(Map, \"mHDCDNg4aNsMKZpgB1SRBpTJyKg=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/lion/Sites/Visualization/project-on-github/Gun_Violence_US_Visualization/src/Map.js"],"names":["React","useState","useEffect","useLayoutEffect","geoAlbers","geoPath","geoAlbersUsa","useD3","d3","feature","Map","props","ref","useRef","statesData","setStatesData","scaleData","setScaleData","scaleSend","eventsData","setEventsData","res","fetch","statesDataCombine","json","features","res1","eventsDataCombine","projection","scale","translate","chartEl","select","current","selectAll","remove","chart","append","path","tip","attr","offset","html","d","properties","name","myColor","scaleLinear","domain","range","data","enter","NAME","style","i","data2","length","console","log","num","geometry","coordinates"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from \"react\"\n// import { geoEqualEarth, geoPath } from \"d3-geo\"\nimport { geoAlbers, geoPath,geoAlbersUsa } from \"d3-geo\"\nimport { useD3 } from './hooks/useD3';\nimport * as d3 from \"d3\"\nimport { feature } from \"topojson-client\"\n\n// const projection = geoEqualEarth()\n//   .scale(160)\n//   .translate([ 800 / 2, 450 / 2 ])\n\nfunction Map(props) {\n\n  const ref = React.useRef(null);\n  const [statesData, setStatesData] = useState([]);\n  const [scaleData, setScaleData] = useState(props.scaleSend);\n  const [eventsData, setEventsData] = useState([]);\n\n\n  // let projection = geoAlbersUsa()\n  // .scale(scaleData)\n  // .translate([ 960 / 2, 600 / 2 ])\n\n  // console.log(`OUT${scaleData}`)\n\nuseEffect(() => {\n  \n  (async () => {\n    const res = await fetch('./gz_2010_us_040_00_500k.json')\n    const statesDataCombine = await res.json();\n    const statesData = statesDataCombine.features\n    setStatesData(statesData);\n    setScaleData(props.scaleSend);\n\n    const res1 = await fetch('./cases.geojson')\n    const eventsDataCombine = await res1.json();\n    const eventsData = eventsDataCombine.features;\n    setEventsData(eventsData);\n\n\n\n    const projection = geoAlbersUsa()\n    .scale(scaleData)\n    .translate([ 960 / 2, 600 / 2 ])\n\n    const chartEl = d3.select(ref.current);\n    chartEl.selectAll(\"*\").remove();\n\n    const chart = chartEl.append(\"g\")\n\n    const path = d3.geoPath()\n    .projection(projection);\n\n    var tip = d3-tip()\n        .attr('class', 'd3-tip')\n        .offset([-10, 0])\n        .html((d) => {\n            return \"<strong>Country: </strong><span class='details'>\" + d.properties.name + \"<br></span>\"\n        });\n\n      // console.log(scaleData);\n      const myColor = d3.scaleLinear().domain([1,10]).range([\"white\", \"#9865ff\"])\n\n      \n\n      chart.selectAll(\"path\")\n        .data(statesData)\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", \"state\")\n        .attr(\"id\", function(d){\n        return d.properties.NAME\n        })\n        .attr(\"d\", path)\n        // .style(\"fill\", \"steelblue\");\n        // .style(\n        //     \"opacity\", \n        //     function(d){\n        //       for (let i = 0; i < props.data1.length ; i++){\n        //         if (props.data1[i].name == d.properties.NAME) {\n        //           // console.log(data1.data1[i].num)\n        //           return props.data1[i].num + 0.05\n        //         }\n        //       } \n        //     })\n        .style(\n            \"fill\", \n            function(d){\n              for (let i = 0; i < props.data2.length ; i++){\n                if (props.data2[i].name == d.properties.NAME) {\n                  // console.log(myColor(props.data2[i]))\n                  console.log(`Here${myColor(props.data2[i].num*10)}`)\n                  console.log(`Here${i}`)\n                  console.log(`Here${props.data2[i].num}`)\n                  return myColor(props.data2[i].num*10)\n                }\n              } \n            })\n\n          chart\n            .selectAll(\".points\")\n            .data(eventsData).enter()\n            .append(\"circle\")\n            .attr(\"class\", \"event\")\n            .attr(\"r\", \n                function (d) { \n                    // console.log(d)\n                        return 4.0\n                    // }\n                })\n            .attr(\"transform\", \n            \n                function(d) { \n                  // console.log(d)\n                return \"translate(\" + projection(d.geometry.coordinates) + \")\"\n            })\n          })();\n      \n      },[statesData.length]\n  )\n\n  \n  return (\n      \n     <svg viewBox=\"0 0 960 600\" className=\"usMap Map\" ref={ref}></svg>\n  )\n}\n\nexport default Map"]},"metadata":{},"sourceType":"module"}